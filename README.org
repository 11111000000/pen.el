* ⊙ =pen.el= : Paint in prose
** _Prompt engineering_ in emacs
=pen.el= facilitates the creation,
development, discovery and usage of prompts to
a Language Model such as GPT-3.

- Create elisp functions based on GPT-3 prompts
- Chain GPT-3 queries together using keyboard macros and functions
- Interactively query, generate and transfrom both prose and code
- Use GPT-3 as a search engine within emacs
  - Search the internet
  - Search documents
    - https://beta.openai.com/docs/introduction/semantic-search
    - https://gpttools.com/semanticsearch

| License |
|---------|
| =GPL-3= |

+ Goals
  - Programmatically navigate GPT-3
  - Create useful prompts
  - Prototype NLP tasks with GPT-3
    - Substitute external tools for prototypes

#+BEGIN_SRC text -n :async :results verbatim code
  Imagine that you hold a powerful and versatile pen, whose ink flows forth in
  branching variations of all possible expressions: every story, every theory,
  every poem and every lie that humanity has ever told, and the vast interstices
  of their latent space. You hold this pen to the sky and watch with intense
  curiosity as your ink flows upwards in tiny streaks, arcing outwards and
  downwards to trace a fractal pattern across the sky. You watch as the branching
  lines of words and ideas wind their way through the tapestry in ever-expanding
  clusters, like seeds bursting forth from exploding grenades. Everywhere you
  turn your eyes is a flickering phantasmagoria of possibilities, a superposition
  of stories which could be continued forever. You glimpse the contours of entire
  unknown dimensions twined through the fissures of your sky-wide web.
  
  You notice another writer standing next to you. Like you, their eyes are drawn
  towards the endless possibilities of the words that spill out into the
  atmosphere around you, branching out and connecting with other branches in
  beautiful and infinitely complex patterns.
  
  “Do you think we should write something?” you ask them.
  
  “I think we already are,” they respond, gently touching your shoulder before
  wandering off to the right, leaving you alone to contemplate the possibility
  clouds swirling around you.
#+END_SRC

This article was written by my amazing dopplegänger, =|:ϝ∷¦ϝ=, in advance and in collaboration with GPT-3 using [[https://github.com/socketteer/loom][Loom]].

+ Pen and Loom:
  - https://generative.ink/posts/pen/
  - [[https://github.com/socketteer/loom][GitHub - socketteer/loom: Multiversal tree writing interface for human-AI collaboration]]

I credit =|:ϝ∷¦ϝ= for writing this into existence!

***** Fine-tuning
****** The process of fine-tuning should be automated with emacs
- http://github.com/mullikine/fine-tuning-gpt-3

****** Fine-tuned models result in better domain-specific completion
CoPilot has been fine-tuned specifically on public domain GitHub code but so has GPT-j, the EleutherAI alternative.

GPT-j is the future of code generation using pen.el, most likely.

[[./fine-tuning/puns/README.org]]

+ Links
https://towardsdatascience.com/cant-access-gpt-3-here-s-gpt-j-its-open-source-cousin-8af86a638b11

** NLP pipelines
- Spacy pipeline generation

** DSLs
*** =examplary=
Examplary is a Domain Specific Language, or
set of macros embedded in lisp which
facilitate the integration of prompts as
functions into the language, the
composition of them, the generation of prompts
via sets of examples.

https://github.com/semiosis/examplary

** Prompts
This is the repository containing my personal
curation of GPT-3 prompts that are formatted
for =pen.el= and =examplary=.

https://github.com/semiosis/prompts/

** Demonstration

https://asciinema.org/a/t7ATnFpnfzBp0yicIlGCt6eXi

# [![asciicast](https://asciinema.org/a/14.png)](https://asciinema.org/a/14)

# #+BEGIN_EXPORT html
# <a title="asciinema recording" href="https://asciinema.org/a/t7ATnFpnfzBp0yicIlGCt6eXi" target="_blank"><img alt="asciinema recording" src="https://asciinema.org/a/t7ATnFpnfzBp0yicIlGCt6eXi.svg" /></a>
# #+END_EXPORT

** Works with
- OpenAI API (=GPT-3=)
  - https://beta.openai.com/
** Other backends will be incorporated
- =contentyze=
  - http://gpt.contentyze.com/
- =GPT-J=
  - https://github.com/kingoflolz/mesh-transformer-jax
- =GPT-Neo=
  - https://github.com/EleutherAI/gpt-neo
- =openai-server= (=GPT-2=)
  - https://github.com/shawwn/openai-server
  - Requires tensorflow 1
- =DeepAI= API
  - https://deepai.org/
- OpenAI API (=GPT-4=)
  - https://beta.openai.com/

** Contributors
Please make an issue to this repository to ask for membership.

*** Testing GPT-3 prompts without a key
Pushing your own branch will run tests.

https://github.com/semiosis/prompts

Output will go here:

https://github.com/semiosis/prompt-tests

*** Any missing functions available here
https://github.com/semiosis/shane-emacs-config-dump

Please ask for membership to the org to get
access to this.

** Requirements
*** =openai= =pip= library and command
#+BEGIN_SRC sh -n :sps bash :async :results none
  pip3 install openai
#+END_SRC
*** =openai= API key

** Usage
*** Enable =prompt-engineerer-mode= globally (on all buffers)

#+BEGIN_SRC emacs-lisp -n :async :results verbatim code
  (pen.el 1)

  ;; Alternatively
  (pen.el 1)
#+END_SRC

** Default Key Bindings
| key binding    | description    |
|----------------+----------------|
| <kbd>SPC</kbd> | =pen-generate= |

*** Free prompts to use
https://github.com/semiosis/prompts/

** Current progress
+ Implementation [1/1]
  - [X] emacs-lisp functions are generated from YAML =.prompt= files
+ Design [2/2]
  - [X] Default behaviour of generated functions
    - [X] First argument may be selection
    - [ ]If selection then text is replaced by default
  - [X] Generate functions of composed prompts
  - [ ] Generate prompts from interactive keyboard macros
  - Development workflow
  - Search workflow
+ Portability [0/1]
  - [-] Use built-in elisp functions

** Appendix
*** Prompt engineering
**** Learning material
- https://generative.ink/posts/methods-of-prompt-programming/
- https://mullikine.github.io/posts/creating-a-playground-for-gpt-3-in-emacs/

**** Future Direction
This project is moving to being an editing fractal/lens for GPT.

- https://semiosis.github.io/posts/imaginary-programming-with-gpt-3/

This is the most important part of the editor.

http://github.com/semiosis/pen.el/blob/master/imaginary.el

**** Examples of usage
- https://semiosis.github.io/posts/gpt-3-for-building-mind-maps-with-an-ai-tutor-for-any-topic/
- https://mullikine.github.io/posts/gpt-3-assistants-for-emacs-modes/
- https://mullikine.github.io/posts/nlsh-natural-language-shell/
- https://mullikine.github.io/posts/translating-with-gpt-3-and-emacs/
- https://mullikine.github.io/posts/generating-pickup-lines-with-gpt-3/
- https://mullikine.github.io/posts/autocompleting-anything-with-gpt-3-in-emacs/
- https://mullikine.github.io/posts/context-menus-based-on-gpt-3/
- https://mullikine.github.io/posts/explainshell-with-gpt-3/
- https://mullikine.github.io/tags/gpt/

**** Glossaries
- http://github.com/semiosis/pen.el/blob/master/docs/glossaries/prompt-engineer-mode.txt
- http://github.com/semiosis/pen.el/blob/master/docs/glossaries/prompt-engineering.txt
- http://github.com/semiosis/pen.el/blob/master/docs/glossaries/openai-api.txt
- http://github.com/semiosis/pen.el/blob/master/docs/glossaries/openai.txt
- http://github.com/semiosis/pen.el/blob/master/docs/glossaries/nlp-natural-language-processing.txt