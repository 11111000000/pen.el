* =prompt-engineer-mode= (=PEn=)

Prompt-Engineer Mode is a global minor mode for emacs that facilitates the
creation, development, discovery and usage of prompts in your emacs.

- Create elisp functions based on GPT-3 prompts
- Chain GPT-3 queries together using keyboard macros and functions
- Interactively query, generate and transfrom both prose and code
- Use GPT-3 as a search engine within emacs
  - Search the internet
  - Search documents
    - https://beta.openai.com/docs/introduction/semantic-search
    - https://gpttools.com/semanticsearch

** Works with
- OpenAI API (GPT-3)
  - https://beta.openai.com/
*** Planned
- =openai-server= (GPT-2)
  - https://github.com/shawwn/openai-server
  - Requires tensorflow 1
- DeepAI API
  - https://deepai.org/
- OpenAI API (GPT-4)
  - https://beta.openai.com/

** Requirements
*** =openai= =pip= library and command
#+BEGIN_SRC sh -n :sps bash :async :results none
  pip3 install openai
#+END_SRC
*** =openai= API key

** Usage

*** Enable =prompt-engineerer-mode= globally (on all buffers)

#+BEGIN_SRC emacs-lisp -n :async :results verbatim code
  (prompt-engineer-mode 1)

  ;; Alternatively
  (pen-mode 1)
#+END_SRC

** Default Key Bindings
| key binding    | description    |
|----------------+----------------|
| <kbd>SPC</kbd> | =pen-generate= |

** Current progress
#+BEGIN_SRC emacs-lisp -n :async :results verbatim code
  (defun pen-tweet-sentiment-classifier (input)
    (interactive (list (my/selected-text)))
    (let* ((prompt-fp (umn "$MYGIT/mullikine/prompt-engineer-mode/prompts/tweet-sentiment-classifier.prompt"))
           (output (if input (sor (chomp (sn (concat "openai-complete " (q prompt-fp) " " (q input))))))))
      (if output
          (if (interactive-p)
              (message output)
            output))))
  
  (defun pen-summarise-for-second-grader (input)
    (interactive (list (my/selected-text)))
    (let* ((prompt-fp (umn "$MYGIT/mullikine/prompt-engineer-mode/prompts/summarize-for-2nd-grader.prompt")))
      (region-pipe (concat "openai-complete " (q prompt-fp) " " (q input) " | chomp"))))
  
  (defun pen-make-analogy (former latter)
    (interactive (list (read-string-hist "analogy participant: ")
                       (read-string-hist "analogy participant: ")))
    (let* ((prompt-fp (umn "$MYGIT/mullikine/prompt-engineer-mode/prompts/analogy.prompt")))
      (etv (sn (concat "openai-complete " (q prompt-fp) " " (q former) " "
                       (q latter) " | chomp")))))
#+END_SRC

** Appendix
[[https://www.google.com/search?q=prompt+engineering+gpt][Prompt Engineering]]