* Using =pen=
https://asciinema.org/a/t7ATnFpnfzBp0yicIlGCt6eXi

** _How to crack an egg_ -- The obfuscated version
#+BEGIN_SRC text -n :async :results verbatim code
  In order to understand the process of how to
  crack an egg, one must first understand the
  egg itself.
  
  Eggs are oval objects which are comprised of
  the remnants of expired cellular tissue, as
  the human body is comprised.
  
  The origin of the egg can be traced back to
  the reproductive organ of a female bird.
  
  Once the egg is laid, it is then incubated, a
  process which can take several weeks.
  
  The term “founders” refers in this case to a
  period where the human
#+END_SRC

*** Now let's summarize that paragraph for a 2nd grader.
#+BEGIN_SRC text -n :async :results verbatim code
  An egg is a small round object that comes from
  a hen.
  
  It is made of the stuff that comes out of the
  hen's butt.
  
  The egg is like the human body, because the
  body is also made of the stuff that comes out
  of the butt.
  
  The egg is incubated for a few weeks.
  
  This means that it is kept warm so it can
  grow.
  
  The egg is like a human baby, because a human
  baby is also kept warm so it can grow.
  
  The hen is
#+END_SRC

** Creating some analogies
*** Strawberries are like the ocean because:

#+BEGIN_SRC text -n :async :results verbatim code
  both are systems whose properties are best 
  appreciated from a distance.
#+END_SRC

*** Strawberries are like the ocean because:
Ok... We can adjust the analogy =.prompt= file.

I have adjusted it with a temperature of 0.7
so it can get really creative, and also
adjusted the presence penalty to make it a bit
more verbose.

#+BEGIN_SRC text -n :async :results verbatim code
both need to be protected from pollution.
#+END_SRC

I actually really like this one.

** This is the generated analogy function
#+BEGIN_SRC text -n :async :results verbatim code
  pen-make-analogy is an interactive function defined in my-openai.el.

  Signature
  (pen-make-analogy FORMER LATTER)

  Key Bindings
  This command is not in any keymaps.

  References
  pen-make-analogy is unused in my-openai.el.

  Find all references Find callees

  Debugging
  Enable tracing
  Disassemble Forget

  Source Code
  ;; Defined in ~/source/git/config/emacs/config/my-openai.el
  ;; Could not find source code, showing raw function object.
  (lambda
    (former latter)
    (interactive
     (list
      (read-string-hist "analogy participant: ")
      (read-string-hist "analogy participant: ")))
    (let*
        ((prompt-fp
          (umn "$MYGIT/mullikine/prompt-engineer-mode/prompts/analogy.prompt")))
      (etv
       (sn
        (concat "openai-complete "
                (q prompt-fp)
                " "
                (q former)
                " "
                (q latter)
                " | chomp")))))

  Symbol Properties
  event-symbol-element-mask
    (pen-make-analogy 0)
  event-symbol-elements
    (pen-make-analogy)
  modifier-cache
    ((0 . pen-make-analogy))
#+END_SRC

* =prompt-engineer-mode= (=PEn=)

Prompt-Engineer Mode is a global minor mode for emacs that facilitates the
creation, development, discovery and usage of prompts to a language model.

- Create elisp functions based on GPT-3 prompts
- Chain GPT-3 queries together using keyboard macros and functions
- Interactively query, generate and transfrom both prose and code
- Use GPT-3 as a search engine within emacs
  - Search the internet
  - Search documents
    - https://beta.openai.com/docs/introduction/semantic-search
    - https://gpttools.com/semanticsearch

# [![asciicast](https://asciinema.org/a/14.png)](https://asciinema.org/a/14)

#+BEGIN_EXPORT html
<a title="asciinema recording" href="https://asciinema.org/a/TcXY3n2musmKPvRbr9sNnsrJc" target="_blank"><img alt="asciinema recording" src="https://asciinema.org/a/TcXY3n2musmKPvRbr9sNnsrJc.svg" /></a>
#+END_EXPORT

** Works with
- OpenAI API (GPT-3)
  - https://beta.openai.com/
*** Planned
- =openai-server= (GPT-2)
  - https://github.com/shawwn/openai-server
  - Requires tensorflow 1
- DeepAI API
  - https://deepai.org/
- OpenAI API (GPT-4)
  - https://beta.openai.com/

** Requirements
*** =openai= =pip= library and command
#+BEGIN_SRC sh -n :sps bash :async :results none
  pip3 install openai
#+END_SRC
*** =openai= API key

** Usage

*** Enable =prompt-engineerer-mode= globally (on all buffers)

#+BEGIN_SRC emacs-lisp -n :async :results verbatim code
  (prompt-engineer-mode 1)

  ;; Alternatively
  (pen-mode 1)
#+END_SRC

** Default Key Bindings
| key binding    | description    |
|----------------+----------------|
| <kbd>SPC</kbd> | =pen-generate= |

** Current progress
+ Implementation [1/1]
  - [X] emacs-lisp functions are generated from YAML =.prompt= files
+ Design [1/2]
  - [X] Default behaviour of generated functions
    - [X] First argument may be selection
    - [ ]If selection then text is replaced by default
  - [ ] Generate functions of composed prompts
  - Development workflow
  - Search workflow
+ Portability [0/1]
  - [-] Use built-in elisp functions

** Appendix
[[https://www.google.com/search?q=prompt+engineering+gpt][Prompt Engineering]]

** Examples
*** Create analogy
**** earth is like the universe
they are both governed by the laws of physics.

**** vim is like emacs
both are computer text editors.

**** Cars are like trains
both travel on tracks.

**** dolphins are like people
They are both members of the class Mammalia.

*** abstractive summarization
**** computers
#+BEGIN_SRC text -n :async :results verbatim code
  Early computers were only conceived as
  calculating devices. Since ancient times,
  simple manual devices like the abacus aided
  people in doing calculations. Early in the
  Industrial Revolution, some mechanical devices
  were built to automate long tedious tasks,
  such as guiding patterns for looms. More
  sophisticated electrical machines did
  specialized analog calculations in the early
  20th century. The first digital electronic
  calculating machines were developed during
  World War II. The first semiconductor
  transistors in the late 1940s were followed by
  the silicon-based MOSFET (MOS transistor) and
  monolithic integrated circuit (IC) chip
  technologies in the late 1950s, leading to the
  microprocessor and the microcomputer
  revolution in the 1970s. The speed, power and
  versatility of computers have been increasing
  dramatically ever since then, with transistor
  counts increasing at a rapid pace (as
  predicted by Moore's law), leading to the
  Digital Revolution during the late 20th to
  early 21st centuries. 
#+END_SRC

***** Simplification 1
#+BEGIN_SRC text -n :async :results verbatim code
  Computers were invented to do math. Before
  computers, people used a tool called a slide
  rule to do math. Slide rules were hard to use,
  so people invented a new tool called a
  calculator. Calculators were hard to use, so
  people invented a new tool called a computer.
  Computers were hard to use, so people invented
  a new tool called a computer with a screen.
  Computers with screens were hard to use, so
  people invented a new tool called a computer
  you can touch 
#+END_SRC

***** Simplification 2 -- I like this one
#+BEGIN_SRC text -n :async :results verbatim code
  Computers were invented to help people do math.
  People have been using simple machines like the abacus to help them do math for a long time.
  More complicated machines helped people do math faster.
  Now people can do math faster with computers. 
#+END_SRC