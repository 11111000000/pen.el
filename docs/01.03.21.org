* =pen.el= Paint in prose

* perspective
- haskell is very important to be using while working with prompts
- haskell should be easy to debug once i am familiar
- i should start pseudocoding in haskell

* Prompt ideas
- generate prompt
  - allegory
- =.prompt= key for what command generalised it.
** =.prompt= key flags
- completer context N tokens prior
- reverse prompt
  - the name of a prompt which does approximately the opposite
- reversible:
  - prompt should generate 2 functions
- tags
  - prompt-manipulation
    - This flag specifies that this prompt is intended for modifying prompts. That makes it easy to search for.
** prompts
- parameterise - a prompt for working on prompts
  - these were the parameterise
  - these are the new params
  - e.g. change this text from about X to about Y.
    - This is useful for prototyping prompts
- translate morse code
- vim command description
  - generate description from vim command
- vim command generation
  - generate command from vim description
- python generators
- mediate
  - Generates a compromise.
- activity given some interests
- code-gen
  - sh
  - python
  - vim
- musical tones
- recipe generation
  - request ingredients via interactive function
  - brownie generator
- Search for lyrics

* =pen.el=
- emulate filter script
- bisect parameters
  - parameter search
- construct prompt
  - command that generated it
    - pick a pattern, generate prompt
      - fuzzy select the pattern
- tabulated list mode for prompt functions
- gantt chart
- diagram of components ecosystem
- prompt database / prompthub
  - create github repo with your own prompts
- document design mode
  - structure a document using parameters, sentiment, etc. and generate the text
- analyse a document
- =pen-company-complete=
  - have a binding, like Deep TabNine and a default prompt, and prompt selection
- parameter sets
  - select settings suitable for different types of prompts
- custom seq2seq command, rather than OpenAI API
- generated text should retain information on what generated it

* Meta-text
- new text format for specifying all transformation functions as well as input and output. Memoised - results embedded in format

* =examplary=
- blends prompts
  - not merely compose
    - styles; e.g. figlet text style as emoji
- allegory
  - prompt tepmlate
    - generate the prompt

* =examplary.el=
- prototype examplary with this
- descrbe pattern
- generate pattern
- reversible (describe/gen)
- describe entire applications
  - CV-builder
- validate results

* =semiosis/prompt-engineering-patterns=
- describe
- generate
- This is the design for design patterns

* =examplary.hs=
Haskell functions (including the 'have a good day' monad.

* =filters=
- Maintain a filters function repository like =semiosis/prompts=.
  - This should be used in the same project
  - Filters may take parameters as prompts do.
  - Requires a filter descrioption format
    - Call it =.filter=.

* =pentext=
- Generate prompts with templates.
- This is a templating format.
- The template is emacs macros and functions which expand to generate the document.

** functions
- loop
  - This would be useful for generating more cost-effective prompts.

* =deeptext==
Not sure what the use case is here currently.

- This is a document format that contains and evaluates to the document as it is meant to be viewed.
- It also contains annotations for the transformations, inputs and outputs of those transformations.
- It allows for re-evaluation.
- The use-case is templates.

* =text=
- A document format for generating prompts.

* =pentex=
Latex library similar to =pentext=.

** TODO Investigate the ease of this