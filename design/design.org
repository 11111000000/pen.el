* Design
** Interactive functionality
*** Function types
**** Filter
- Replaces the current text with the prompt output.

** Postprocessing
Specify in the prompt descriptions filter
scripts which can be used to post-process the
output of the prompt before it's sent to
emacs.

*** Quality-assurance check
*** Transformation
i.e. Selc

** What do I *need*
*** Customization -- use built-in
*** Control panel -- use transient for this, or some kind of buffer-local settings/configuration?
*** UI components
+ Acquired [1/2]
  - [ ] Spin button for toggling a value
    - This would've been nice. But I will work without it.
  - [X] Right click menu
    - I'm not sure yet what the utility is here yet.

* Implementation
** Backend
*** =openai= command from =pip=
#+BEGIN_SRC sh -n :sps bash :async :results none
  py -36 i openai
#+END_SRC

#+BEGIN_SRC sh -n :sps bash :async :results none
  openai --help
#+END_SRC

* Objectives
** Design useful prompts
** Chaining
http://gptprompts.wikidot.com/chaining:chaining

I will do this by composing functions.

** Fast design/feedback loop (using emacs)
** Create =String->String= functions based on prompts
*** Attempt to make a 'name-generator' and create the name of the Tomato Bear
** Compatibility with DeepAI
https://deepai.org/machine-learning-model/text-generator
** Use in both Messenger and IRC
** Pre-defined search functions for finding new prompts online
** [#A] Fine-tuning -- This is the killer feature that the OpenAI playground can't do
https://github.com/cabhijith/GPT-3_Docs

#+BEGIN_SRC sh -n :sps bash :async :results none
  py -36 i openai-finetune
#+END_SRC

e:openai-ft
e:openai-ft-classification
e:openai-ft-events
e:openai-ft-report

https://github.com/cabhijith/GPT-3_Docs/tree/master/GPT-3_Docs

** Work with
- OpenAI API (GPT-3)
  - https://beta.openai.com/
- =openai-server= (GPT-2)
  - https://github.com/shawwn/openai-server
  - Requires tensorflow 1
- DeepAI API